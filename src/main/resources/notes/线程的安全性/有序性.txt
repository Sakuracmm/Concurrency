有序性：
    Java内存模型中，允许编译器和处理器对指令进行重排序
    ，但是重排序过程中不会影响到单线程程序的执行，却会
    影响到多线程并发执行的正确性

    volatile、synchronized、lock

有序性 - happens-before原则
    -程序次序原则：一个线程内，按照代码顺序，书写在前面的操作现行发生于书写在后面的操作
    -锁定规则：一个unlock操作先行发生于后面对同一个所的lock操作
    -volatile变量操作：对一个变量的写操作先行发生于后面对这个变量的读操作
    -传递规则：如果操作A现行发生于操作B,而操作B又先行发生于操作C,则可以得出操作A先行发生于操作C
    -线程启动规则：Thread对象的start()方法先行发生于此线程的每一个动作
    -线程中断规则：对线程interrupt()方法的调用先行发生于被终端线程的代码检测到中断事件的发生
    -线程终结规则：线程中所有的操作都先于发生于线程的终止检测，我们可以通过Thread.join()方法结束、
     Thread.isAlive()的返回值手段检测到线程已经终止执行
    -对象终结规则：一个对象的初始化完成先行发生于它的finalize()方法的开始